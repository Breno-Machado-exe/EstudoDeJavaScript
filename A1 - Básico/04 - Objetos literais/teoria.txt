||---------------------------------------------------------------------------||

    Não é a ideia geral de objetos do javascript
    É a estrutura de dados objetos ou objeto literal
    Semelhante ao struct do c++

    Acessamos as propriedades e um objeto por seunome.propriedade
    Funções que são propriedades de um objeto são chamadas de métodos e 
    podemos acessá-los da mesma forma:  seunome.metodo()

    Acessamos as propriedades dos objetos de forma simples pelo . ,fazendo os
    objetos atuarem como mapas chave-valor


    (this)

    Ao invés de usar :

    let joao =
    {
        fruta: "maçã",
        quantidade: 1,
        comeu: function()
        {
            joao.quantidade --;
        }
    }

    Podemos usar :

    let joao =
    {
        fruta: "maçã",
        quantidade: 1,
        comeu: function()
        {
            this.quantidade --;
        }
    }

    O this vai referênciar o próprio objeto

    *** atenção ***
    Podemos usar o this também em uma função declarada, dai ao usá-la como 
    método, o this passa a se referenciar ao objeto que a função
    está ligada em uma chamada

    *** arrow ***
    Funções arrow como método não ligam this ao objeto

||---------------------------------------------------------------------------||



||---------------------------------------------------------------------------||


   (propriedades)
   
   Quando elas são um tipo primitivo, elas são passadas por cópia
   Ou seja
   Uma variável que recebe o valor de uma propriedade, recebe uma copia
   do valor atual daquela propriedade

   Quando é um tipo bão primitivo, ao atribuir a outra variável, ela recebe
   uma referência da propriedade

   (métodos)

   Ao definir um método para 2 objetos diferentes, criamos 2 funções que 
   fazem a mesma coisa. Além da duplicação desnecessária, se precisarmos 
   alterar algo em uma função, termos que alterar novamente nas outras
   iguais;

   Solução: Criar uma função fora dos objetos e usá-la como método nos
   objetos que quiser

   O nome do método não precisa ser o mesmo no objeto, mas se for, pode ser
   omitido;
   exemplo:

   Temos uma função comer()

   Podemos usar ela como atodecomer: comer ou comer: comer, que pode ser
   simplificado para apenas comer.

   Diminui a duplicação de código, mas ainda é suscetivel a erros humanos

   Para resolver, vamos usar os (protótipos)


||---------------------------------------------------------------------------||
