||---------------------------------------------------------------------------||

    (introdução)
    
    O javascript só possui 1 linha de execução;
    Temos que tomar cuidado para não segura-la e deixar a aoplicação
    congelada;

    O tratamento de eventos é feito seguindo uma ordem de prioridades ao
    executar operações;

||---------------------------------------------------------------------------||



||---------------------------------------------------------------------------||

    (Call Stack)

    É onde as operações/tarefas são alocadas primariamente;
    É uma pilha de coisas, portanto a última operação a ser empilhada é a 
    primeira a ser resolvida.

    LIFO - last in, first out

    Sempre que uma operação estiver nessa pilha, ela é resolvida e removida.
    O que é operado ali nós chamamos de código bloqueante

||---------------------------------------------------------------------------||



||---------------------------------------------------------------------------||

    (Web API/LiUV)

    É onde as operações de entrada e saída são direcionadas para serem 
    resolvidas em processos separados

    Os processos enviados pra cá costumam ser mais lentos que um código js 
    e por isso precisam usar uma função de callback para trabalhar no 
    resultado

    Não há ordem de quem vai ser resolvido.

    O que é operado ali chamamos de códigos não bloqueantes, posi não
    seguram a linha de execução do js


||---------------------------------------------------------------------------||



||---------------------------------------------------------------------------||

    (Task Queue)

    É onde operações de novos processos, callbacks e eventos são alocados
    É uma fila, a primeira operação a ser enfileirada é a primeira a ser 
    resolvida

    FIFO - first in, first out

    Se tiver uma operação na frente da task queue e a call stack estiver
    vazia, a operação é enviada para a call stack

||---------------------------------------------------------------------------||



||---------------------------------------------------------------------------||

    (Microtask Queue)

    É onde operações de funções assíncronas e conclusões de promessas vão;
    FIFO assim como a Task Queue;

    Se tiver uma operação na frente da microtask queue e a call stack estiver
    vazia, a operação é enviada para a call stack.
    Tem prioridade em relação a task queue
    
||---------------------------------------------------------------------------||